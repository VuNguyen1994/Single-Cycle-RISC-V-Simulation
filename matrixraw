addi x4, x0, 4          # Store max value of loop 4 to x4
beq x1, x4, 72          # --START i LOOP-- x1=i check if x1 = 4, if yes, jump to END i LOOP
addi x2, x0, 0          # x2 = j. Reset x2 each time j loop finished.
beq x2, x4, 44          # --START j LOOP-- Check if x2 = 4, if yes, jump to END j LOOP
add x3, x1, x1          # x3 is the index of matrix
add x3, x3, x1          # add x1 to x3 4 times
add x3, x3, x1          # so x3 = 4*x1 
add x3, x3, x2          # add x2(or j) to x3. x3 = 4*i + j
slli x6, x3, 3          # x6 is index of data memory. x6 increment by 8 while x3 increment by 1 in j loop. so shift left x6 = x3 << 3 
ld  x5, 0(x6)           # load data of x6 which is the data of matrix to temporary x5
sll x5, x5, x2          # matrix multiplication by shift left j. x5= matrix(x6)<<j
add x10, x10, x5        # accumulate x5 to x10 for all loop in j loop
addi x2, x2, 1          # j++
beq x0, x0, -40         # jump back to START j loop
addi x30, x30, 8        # here when j loop finish, x30 is used to keep track of index of output matrix in data memory
sd x10, 128(x30)        # Store data of x10 (accumulated) to memory location 128 + x30 (so output matrix start at M(136))
addi x10, x0, 0         # Reset x10 to 0 before going to another i loop
addi x1, x1, 1          # i++;
beq x0, x0, -68         #jump back to START i LOOP
